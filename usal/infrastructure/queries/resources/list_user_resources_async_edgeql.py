# AUTOGENERATED FROM 'usal/infrastructure/queries/resources/list_user_resources.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema

        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass

        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class ListUserResourcesResult(NoPydanticValidation):
    id: uuid.UUID
    title: str
    image: str
    description: str
    file: str


async def list_user_resources(
    executor: gel.AsyncIOExecutor,
    *,
    search: str | None = None,
    offset: int | None = None,
    limit: int | None = None,
) -> list[ListUserResourcesResult]:
    return await executor.query(
        """\
        WITH
            search := <optional str>$search,

        FILTERED_RESOURCES := (
            SELECT Resources
            FILTER (
            (.title ILIKE '%' ++ search ++ '%' IF EXISTS search ELSE TRUE)
            )
            AND .status = ResourceStatus.ACTIVE
            ORDER BY .title ASC
            OFFSET <optional int64>$offset
            LIMIT <optional int64>$limit
        )
        SELECT FILTERED_RESOURCES {
            id,
            title,
            image,
            description,
            file,
        }\
        """,
        search=search,
        offset=offset,
        limit=limit,
    )

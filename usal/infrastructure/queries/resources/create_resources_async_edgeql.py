# AUTOGENERATED FROM 'usal/infrastructure/queries/resources/create_resources.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import enum
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateResourcesResult(NoPydanticValidation):
    id: uuid.UUID


class ResourceStatus(enum.Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


async def create_resources(
    executor: gel.AsyncIOExecutor,
    *,
    title: str,
    image: str,
    description: str,
    file: str,
    status: ResourceStatus,
) -> CreateResourcesResult:
    return await executor.query_single(
        """\
        INSERT Resources{
            title := <str>$title,
            image := <str>$image,
            description := <str>$description,
            file := <str>$file,
            status := <ResourceStatus>$status,
        }\
        """,
        title=title,
        image=image,
        description=description,
        file=file,
        status=status,
    )

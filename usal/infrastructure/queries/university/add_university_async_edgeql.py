# AUTOGENERATED FROM 'usal/infrastructure/queries/university/add_university.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import enum
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class AddUniversityResult(NoPydanticValidation):
    id: uuid.UUID


class UniversityStatus(enum.Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


async def add_university(
    executor: gel.AsyncIOExecutor,
    *,
    name: str,
    location: str,
    image: str,
    application_fee: bool,
    community_college: bool,
    state: uuid.UUID,
    description: str,
    acceptance_rate: str,
    annual_fee: str,
    student_faculty_ratio: str,
    available_majors: list[uuid.UUID],
    admission_requirements: list[str],
    status: UniversityStatus,
    degrees: list[uuid.UUID],
    url: str,
    rating: float,
    featured: bool,
) -> AddUniversityResult:
    return await executor.query_single(
        """\
        INSERT University{
            name := <str>$name,
            location := <str>$location,
            image := <str>$image,
            application_fee := <bool>$application_fee,
            community_college := <bool>$community_college,
            state:=(
                SELECT State
                FILTER .id = <uuid>$state
            ),
            description := <str>$description,
            acceptance_rate := <str>$acceptance_rate,
            annual_fee := <str>$annual_fee,
            student_faculty_ratio := <str>$student_faculty_ratio,
            available_majors := DISTINCT((
                FOR id IN array_unpack(<array<uuid>>$available_majors)
                UNION (
                    SELECT Major 
                    FILTER .id = id
                )
            )),
            admission_requirements := (
                IF EXISTS <array<str>>$admission_requirements AND len(<array<str>>$admission_requirements) > 0
                THEN array_unpack(<array<str>>$admission_requirements) 
                ELSE {}
            ),
            status := <UniversityStatus>$status,
            degree := DISTINCT((
                FOR id IN array_unpack(<array<uuid>>$degrees)
                UNION (
                    SELECT Degree 
                    FILTER .id = id
                )
            )),
            url := <str>$url,
            rating := <float64>$rating,
            featured := <bool>$featured,
        }\
        """,
        name=name,
        location=location,
        image=image,
        application_fee=application_fee,
        community_college=community_college,
        state=state,
        description=description,
        acceptance_rate=acceptance_rate,
        annual_fee=annual_fee,
        student_faculty_ratio=student_faculty_ratio,
        available_majors=available_majors,
        admission_requirements=admission_requirements,
        status=status,
        degrees=degrees,
        url=url,
        rating=rating,
        featured=featured,
    )

# AUTOGENERATED FROM 'usal/infrastructure/queries/university/list_user_university.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class ListUserUniversityResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    location: str
    image: str
    state: ListUserUniversityResultState
    description: str | None
    acceptance_rate: str
    annual_fee: str
    student_faculty_ratio: str | None
    available_majors: list[ListUserUniversityResultAvailableMajorsItem]
    admission_requirements: list[str]


@dataclasses.dataclass
class ListUserUniversityResultAvailableMajorsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class ListUserUniversityResultState(NoPydanticValidation):
    id: uuid.UUID
    name: str


async def list_user_university(
    executor: gel.AsyncIOExecutor,
    *,
    search: str | None = None,
    state: uuid.UUID | None = None,
    major: uuid.UUID | None = None,
    application_fee: bool | None = None,
    community_college: bool | None = None,
    offset: int | None = None,
    limit: int | None = None,
) -> list[ListUserUniversityResult]:
    return await executor.query(
        """\
        WITH
            search := <optional str>$search,
            state := <optional uuid>$state,
            major := <optional uuid>$major,
            application_fee := <optional bool>$application_fee,
            community_college := <optional bool>$community_college,

        FILTERED_UNIVERSITY := (
            SELECT University
            FILTER (
            (.name ILIKE '%' ++ search ++ '%' IF EXISTS search ELSE TRUE)
            )
            AND (.state.id = state IF EXISTS state ELSE TRUE)
            AND (.available_majors.id = major IF EXISTS major ELSE TRUE)
            AND (.application_fee = application_fee IF EXISTS application_fee ELSE TRUE)
            AND (.community_college = community_college IF EXISTS community_college ELSE TRUE)
            AND (.status = UniversityStatus.ACTIVE)
            ORDER BY .name ASC
            OFFSET <optional int64>$offset
            LIMIT <optional int64>$limit
        )
        SELECT FILTERED_UNIVERSITY {
            id,
            name,
            location,
            image,
            state:{
                id,
                name,
            },
            description,
            acceptance_rate,
            annual_fee,
            student_faculty_ratio,
            available_majors:{
                id,
                name,
            },
            admission_requirements,
        }\
        """,
        search=search,
        state=state,
        major=major,
        application_fee=application_fee,
        community_college=community_college,
        offset=offset,
        limit=limit,
    )

# AUTOGENERATED FROM 'usal/infrastructure/queries/university/get_match_uni_count.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GetMatchUniCountResult(NoPydanticValidation):
    total_count: int


async def get_match_uni_count(
    executor: gel.AsyncIOExecutor,
    *,
    major: uuid.UUID,
    degree: uuid.UUID,
    min_gpa: float,
    test_required: bool,
    min_fee: float,
    max_fee: float,
) -> GetMatchUniCountResult:
    return await executor.query_single(
        """\
        WITH
            major := <uuid>$major,
            degree := <uuid>$degree,
            min_gpa := <float64>$min_gpa,
            test_required := <bool>$test_required,
            min_fee := <float64>$min_fee,
            max_fee := <float64>$max_fee,

        FILTERED_UNIVERSITY := (
            SELECT University
            FILTER (.min_gpa <= min_gpa)
            AND (.annual_fee >= min_fee)
            AND (.annual_fee <= max_fee)
            AND (.test_required = test_required)
            AND (.available_majors.id = major)
            AND (.degree.id = degree)
            AND (.status = UniversityStatus.ACTIVE)
        )
        SELECT {
            total_count := count(FILTERED_UNIVERSITY)
        }\
        """,
        major=major,
        degree=degree,
        min_gpa=min_gpa,
        test_required=test_required,
        min_fee=min_fee,
        max_fee=max_fee,
    )

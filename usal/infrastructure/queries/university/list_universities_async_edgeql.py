# AUTOGENERATED FROM 'usal/infrastructure/queries/university/list_universities.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class ListUniversitiesResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    location: str
    image: str
    state: ListUniversitiesResultState
    description: str | None
    acceptance_rate: str
    annual_fee: str
    student_faculty_ratio: str | None
    available_majors: list[ListUniversitiesResultAvailableMajorsItem]
    admission_requirements: list[str]


@dataclasses.dataclass
class ListUniversitiesResultAvailableMajorsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class ListUniversitiesResultState(NoPydanticValidation):
    id: uuid.UUID
    name: str


async def list_universities(
    executor: gel.AsyncIOExecutor,
) -> list[ListUniversitiesResult]:
    return await executor.query(
        """\
        SELECT University {
            id,
            name,
            location,
            image,
            state:{
                id,
                name,
            },
            description,
            acceptance_rate,
            annual_fee,
            student_faculty_ratio,
            available_majors:{
                id,
                name,
            },
            admission_requirements,
        }\
        """,
    )

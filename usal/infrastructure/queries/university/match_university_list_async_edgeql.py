# AUTOGENERATED FROM 'usal/infrastructure/queries/university/match_university_list.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import enum
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


class DegreeNames(enum.Enum):
    ASSOCIATES_DEGREE = "ASSOCIATES_DEGREE"
    BACHELORS_DEGREE = "BACHELORS_DEGREE"
    MASTERS_DEGREE = "MASTERS_DEGREE"
    DOCTORAL_DEGREE = "DOCTORAL_DEGREE"


@dataclasses.dataclass
class MatchUniversityListResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    location: str
    image: str
    state: MatchUniversityListResultState
    description: str | None
    acceptance_rate: float
    annual_fee: float
    student_faculty_ratio: str | None
    available_majors: list[MatchUniversityListResultAvailableMajorsItem]
    degree: list[MatchUniversityListResultDegreeItem]
    url: str | None
    rating: float | None
    admission_requirements: list[str]


@dataclasses.dataclass
class MatchUniversityListResultAvailableMajorsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class MatchUniversityListResultDegreeItem(NoPydanticValidation):
    id: uuid.UUID
    name: DegreeNames


@dataclasses.dataclass
class MatchUniversityListResultState(NoPydanticValidation):
    id: uuid.UUID
    name: str


async def match_university_list(
    executor: gel.AsyncIOExecutor,
    *,
    major: uuid.UUID,
    degree: uuid.UUID,
    min_gpa: float,
    test_required: bool,
    min_fee: float,
    max_fee: float,
    offset: int | None = None,
    limit: int | None = None,
) -> list[MatchUniversityListResult]:
    return await executor.query(
        """\
        WITH
            major := <uuid>$major,
            degree := <uuid>$degree,
            min_gpa := <float64>$min_gpa,
            test_required := <bool>$test_required,
            min_fee := <float64>$min_fee,
            max_fee := <float64>$max_fee,

        FILTERED_UNIVERSITY := (
            SELECT University
            FILTER (.min_gpa <= min_gpa)
            AND (.annual_fee >= min_fee)
            AND (.annual_fee <= max_fee)
            AND (.test_required = test_required)
            AND (.available_majors.id = major)
            AND (.degree.id = degree)
            AND (.status = UniversityStatus.ACTIVE)
            ORDER BY .name ASC
            OFFSET <optional int64>$offset
            LIMIT <optional int64>$limit
        )
        SELECT FILTERED_UNIVERSITY {
            id,
            name,
            location,
            image,
            state:{
                id,
                name,
            },
            description,
            acceptance_rate,
            annual_fee,
            student_faculty_ratio,
            available_majors:{
                id,
                name,
            },
            degree :{
                id,
                name,
            },
            url,
            rating, 
            admission_requirements,
        }\
        """,
        major=major,
        degree=degree,
        min_gpa=min_gpa,
        test_required=test_required,
        min_fee=min_fee,
        max_fee=max_fee,
        offset=offset,
        limit=limit,
    )

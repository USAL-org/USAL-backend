# AUTOGENERATED FROM 'usal/infrastructure/queries/article/get_all_articles_count.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import enum
import gel


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


class ArticleType(enum.Enum):
    NEWS = "NEWS"
    BLOG = "BLOG"


@dataclasses.dataclass
class GetAllArticlesCountResult(NoPydanticValidation):
    total_count: int


async def get_all_articles_count(
    executor: gel.AsyncIOExecutor,
    *,
    search: str | None = None,
    type: ArticleType | None = None,
) -> GetAllArticlesCountResult:
    return await executor.query_single(
        """\
        WITH
            search := <optional str>$search,
            type:= <optional ArticleType>$type,

        FILTERED_ARTICLE := (
            SELECT Article
            FILTER (
            (.title ILIKE '%' ++ search ++ '%' IF EXISTS search ELSE TRUE) OR
            (.author.full_name ILIKE '%' ++ search ++ '%' IF EXISTS search ELSE TRUE)
            )
            AND (.type = type IF EXISTS type ELSE TRUE)
        )
        SELECT {
            total_count := count(FILTERED_ARTICLE)
        }\
        """,
        search=search,
        type=type,
    )

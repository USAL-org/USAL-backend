# AUTOGENERATED FROM 'usal/infrastructure/queries/article/get_article_by_id.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GetArticleByIdResult(NoPydanticValidation):
    id: uuid.UUID
    created_at: datetime.datetime
    title: str
    cover_image: str
    duration: str | None
    media: list[str]
    content: str
    category: GetArticleByIdResultCategory
    author: GetArticleByIdResultAuthor


@dataclasses.dataclass
class GetArticleByIdResultAuthor(NoPydanticValidation):
    id: uuid.UUID
    full_name: str
    email: str
    pp_url: str | None
    short_description: str
    description: str | None
    social_links: list[str]


@dataclasses.dataclass
class GetArticleByIdResultCategory(NoPydanticValidation):
    id: uuid.UUID


async def get_article_by_id(
    executor: gel.AsyncIOExecutor,
    *,
    article_id: uuid.UUID,
) -> GetArticleByIdResult | None:
    return await executor.query_single(
        """\
        SELECT Article {
            id,
            created_at,
            title,
            cover_image,
            duration,
            media,
            content,
            category,
            author: {
                id,
                full_name,
                email,
                pp_url,
                short_description,
                description,
                social_links
            }
        }
        FILTER .id = <uuid>$article_id\
        """,
        article_id=article_id,
    )

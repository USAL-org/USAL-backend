# AUTOGENERATED FROM 'usal/infrastructure/queries/article/list_articles.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import enum
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


class ArticleType(enum.Enum):
    NEWS = "NEWS"
    BLOG = "BLOG"


@dataclasses.dataclass
class ListArticlesResult(NoPydanticValidation):
    id: uuid.UUID
    title: str
    cover_image: str
    author: ListArticlesResultAuthor


@dataclasses.dataclass
class ListArticlesResultAuthor(NoPydanticValidation):
    id: uuid.UUID
    full_name: str
    pp_url: str | None


async def list_articles(
    executor: gel.AsyncIOExecutor,
    *,
    type: ArticleType,
) -> list[ListArticlesResult]:
    return await executor.query(
        """\
        SELECT Article {
            id,
            title,
            cover_image,
            author: {
                id,
                full_name,
                pp_url
            }
        }
        FILTER .type = <ArticleType>$type\
        """,
        type=type,
    )

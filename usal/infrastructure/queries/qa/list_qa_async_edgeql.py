# AUTOGENERATED FROM 'usal/infrastructure/queries/qa/list_qa.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import enum
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class ListQaResult(NoPydanticValidation):
    id: uuid.UUID
    question: str
    answer: str
    status: QAStatus
    type: QAType


class QAStatus(enum.Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class QAType(enum.Enum):
    UNIVERSITY = "UNIVERSITY"
    ACADEMIC = "ACADEMIC"
    FINANCIAL = "FINANCIAL"
    PERSONAL = "PERSONAL"
    GRADUATE = "GRADUATE"
    POST_GRADUATE = "POST_GRADUATE"
    PHD = "PHD"
    FAMILY = "FAMILY"


class QAType02(enum.Enum):
    UNIVERSITY = "UNIVERSITY"
    ACADEMIC = "ACADEMIC"
    FINANCIAL = "FINANCIAL"
    PERSONAL = "PERSONAL"
    GRADUATE = "GRADUATE"
    POST_GRADUATE = "POST_GRADUATE"
    PHD = "PHD"
    FAMILY = "FAMILY"


async def list_qa(
    executor: gel.AsyncIOExecutor,
    *,
    question: str | None = None,
    type: QAType02 | None = None,
    offset: int | None = None,
    limit: int | None = None,
) -> list[ListQaResult]:
    return await executor.query(
        """\
        WITH
            question := <optional str>$question,
            qa_type:= <optional QAType>$type,

        FILTERED_QA := (
            SELECT QASection
            FILTER (
            (.question ILIKE '%' ++ question ++ '%' IF EXISTS question ELSE TRUE)
            )
            AND .type = qa_type IF EXISTS qa_type ELSE TRUE
            ORDER BY .question ASC
            OFFSET <optional int64>$offset
            LIMIT <optional int64>$limit
        )
        SELECT FILTERED_QA {
            id,
            question,
            answer,
            status,
            type,
        }\
        """,
        question=question,
        type=type,
        offset=offset,
        limit=limit,
    )

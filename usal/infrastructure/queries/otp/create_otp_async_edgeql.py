# AUTOGENERATED FROM 'usal/infrastructure/queries/otp/create_otp.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateOtpResult(NoPydanticValidation):
    id: uuid.UUID
    user_id: uuid.UUID | None
    secret: str
    expiration_time: datetime.datetime


async def create_otp(
    executor: gel.AsyncIOExecutor,
    *,
    user_id: uuid.UUID,
    secret: str,
    expiration_time: datetime.datetime,
) -> CreateOtpResult:
    return await executor.query_single(
        """\
        SELECT (
          INSERT OTP {
            user := (
              SELECT User
              FILTER .id = <uuid>$user_id
            ),
            secret := <str>$secret,
            expiration_time := <datetime>$expiration_time
          }
        ) {
          id,
          user_id := .user.id,
          secret,
          expiration_time
        }\
        """,
        user_id=user_id,
        secret=secret,
        expiration_time=expiration_time,
    )

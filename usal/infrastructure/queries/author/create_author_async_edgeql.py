# AUTOGENERATED FROM 'usal/infrastructure/queries/author/create_author.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateAuthorResult(NoPydanticValidation):
    id: uuid.UUID


async def create_author(
    executor: gel.AsyncIOExecutor,
    *,
    full_name: str,
    email: str,
    pp_url: str | None = None,
    short_description: str,
    description: str | None = None,
    social_links: list[str] | None = None,
) -> CreateAuthorResult:
    return await executor.query_single(
        """\
        INSERT Author{
            full_name := <str>$full_name,
            email:= <str>$email,
            pp_url := <optional str>$pp_url,
            short_description := <str>$short_description,
            description := <optional str>$description,
            social_links := (
                IF EXISTS <optional array<str>>$social_links AND len(<optional array<str>>$social_links) > 0
                THEN array_unpack(<optional array<str>>$social_links) 
                ELSE {}
            ),
        }\
        """,
        full_name=full_name,
        email=email,
        pp_url=pp_url,
        short_description=short_description,
        description=description,
        social_links=social_links,
    )

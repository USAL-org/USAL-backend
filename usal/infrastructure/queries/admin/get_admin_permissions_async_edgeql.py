# AUTOGENERATED FROM 'usal/infrastructure/queries/admin/get_admin_permissions.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import enum
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


class AdminPermissions(enum.Enum):
    ARTICLE_MANAGEMENT = "ARTICLE_MANAGEMENT"
    UNIVERSITY_MANAGEMENT = "UNIVERSITY_MANAGEMENT"
    QA_MANAGEMENT = "QA_MANAGEMENT"
    RESOURCES_MANAGEMENT = "RESOURCES_MANAGEMENT"
    NOTIFICATION_MANAGEMENT = "NOTIFICATION_MANAGEMENT"
    USER_MANAGEMENT = "USER_MANAGEMENT"
    MARKETING_MANAGEMENT = "MARKETING_MANAGEMENT"


@dataclasses.dataclass
class GetAdminPermissionsResult(NoPydanticValidation):
    id: uuid.UUID
    permission: list[AdminPermissions]


async def get_admin_permissions(
    executor: gel.AsyncIOExecutor,
    *,
    admin_id: uuid.UUID,
) -> list[GetAdminPermissionsResult]:
    return await executor.query(
        """\
        SELECT AdminPermission{
            id,
            permission,
        }
        FILTER .admin.id =<uuid>$admin_id\
        """,
        admin_id=admin_id,
    )
